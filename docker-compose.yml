services:
  backend:
    build: ./backend
    # image: ghcr.io/ifpebj-ti/polifarm-backend:latest
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - CONNECTION_STRING=Host=database;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      - JWT_SETTINGS__SECRET=iS2!aZ239#gb39#*3aNgio3g0g239#*3aN239#*3gsS_#*aZgbi
      - JWT_SETTINGS__ISS=https://localhost:8080
      - JWT_SETTINGS__AUD=https://localhost:8080
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://alloy:4317
    ports:
      - "8080:8080"
    networks:
      - backend-network
      - frontend-network
      - observability-network
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped

  frontend:
    build: ./frontend
    # image: ghcr.io/ifpebj-ti/polifarm-frontend:latest
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
    networks:
      - frontend-network
      - observability-network
    restart: unless-stopped

  database:
    image: postgres:17
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - backend-network
      - observability-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  portainer:
    image: portainer/portainer-ce:latest
    ports:
      - "9000:9000"
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
  
  alloy:
    image: grafana/alloy:v1.9.2
    ports:
      - 12345:12345
      - 4318:4318
      - 4317:4317
    networks:
      - observability-network
    volumes:
      - ./config/config.alloy:/etc/alloy/config.alloy
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    depends_on:
      - loki

  # otel-collector:
  #   image: otel/opentelemetry-collector-contrib:latest
  #   volumes:
  #     - ./config/otel-collector-config.yml:/etc/otel-collector-config.yml
  #   command: ["--config", "/etc/otel-collector-config.yml"]
  #   ports:
  #     - "4317:4317"  # gRPC endpoint for OTLP
  #     # - "8888:8888"  # Prometheus exporter endpoint
  #     - "8889:8889"  # Prometheus exporter endpoint
  #     - "13133:13133"  # Health check endpoint
  #   networks:
  #     - observability-network
  #   restart: unless-stopped
  
  loki:
    image: grafana/loki:3.4.2
    ports:
      - "3100:3100"
    networks:
      - observability-network
    volumes:
      - ./config/loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml

  tempo:
    image: grafana/tempo:2.7.1
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
      - tempo_data:/var/tempo
    ports:
      - "3200:3200"   # tempo
    networks:
      - observability-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - 9090:9090
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-remote-write-receiver'
      - '--enable-feature=otlp-write-receiver'
      - '--enable-feature=exemplar-storage'
      - '--enable-feature=native-histograms'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - observability-network
    restart: unless-stopped
 
  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    ports:
      - '3050:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    restart: unless-stopped
    networks:
      - observability-network

  node_exporter:
    image: quay.io/prometheus/node-exporter:v1.5.0
    container_name: node_exporter
    command: '--path.rootfs=/host'
    pid: host
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - observability-network
    
  npm:
    image: jc21/nginx-proxy-manager:latest
    container_name: npm
    restart: unless-stopped
    ports:
      - "80:80" # Tráfego HTTP público
      - "443:443" # Tráfego HTTPS público
      - "81:81" # Interface de administração do NPM
    volumes:
      - npm_data:/data
      - npm_letsencrypt:/etc/letsencrypt

volumes:
  db_data:
    driver: local
  portainer_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  tempo_data:
    driver: local
  npm_data:
    driver: local
  npm_letsencrypt:
    driver: local

networks:
  backend-network:
    driver: bridge
  frontend-network:
    driver: bridge
  observability-network:
    driver: bridge
