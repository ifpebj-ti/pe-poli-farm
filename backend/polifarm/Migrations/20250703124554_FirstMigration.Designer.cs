// <auto-generated />
using System;
using Infra.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(PolifarmDbContext))]
    [Migration("20250703124554_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entites.AccessCode.AccessCodeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExperationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUserUpdatePassword")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AccessCodes");
                });

            modelBuilder.Entity("Domain.Entites.Appointment.AppointmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProfessionalId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Domain.Entites.MedicalCertificate.MedicalCertificateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CertificateNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descriprition")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IssuedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("MedicalCertificates");
                });

            modelBuilder.Entity("Domain.Entites.Profile.ProfileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Domain.Entites.Referral.ReferralEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExpectedDuration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("Referrals");
                });

            modelBuilder.Entity("Domain.Entites.User.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FirstAccess")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Address.AddressEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("text");

                    b.Property<long?>("Number")
                        .HasColumnType("bigint");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("AddressEntity");
                });

            modelBuilder.Entity("Domain.Entities.Anamnese.AnamneseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Allergies")
                        .HasColumnType("boolean");

                    b.Property<string>("AllergiesType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("AntecPathological")
                        .HasColumnType("boolean");

                    b.Property<string>("AntecPathologicalType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BloodPressure")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Diabetes")
                        .HasColumnType("boolean");

                    b.Property<string>("Glucose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeartRate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MedicalHypothesis")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uuid");

                    b.Property<string>("MedicationInUseType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("MedicationsInUse")
                        .HasColumnType("boolean");

                    b.Property<bool>("NecesPsicobio")
                        .HasColumnType("boolean");

                    b.Property<string>("PreviousSurgeries")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RespiratoryRate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Saturation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SignsAndSymptoms")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Temperature")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("UseOfProthesis")
                        .HasColumnType("boolean");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId")
                        .IsUnique();

                    b.ToTable("Anamnesis");
                });

            modelBuilder.Entity("Domain.Entities.EmergencyContactDetails.EmergencyContactDetailsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("EmergencyContactDetailsEntity");
                });

            modelBuilder.Entity("Domain.Entities.HealthAndDisease.HealthAndDiseaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FamilyAVC")
                        .HasColumnType("boolean");

                    b.Property<bool>("FamilyAlzheimer")
                        .HasColumnType("boolean");

                    b.Property<bool>("FamilyCA")
                        .HasColumnType("boolean");

                    b.Property<bool>("FamilyDM")
                        .HasColumnType("boolean");

                    b.Property<bool>("FamilyHAS")
                        .HasColumnType("boolean");

                    b.Property<bool>("FamilyIAM")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uuid");

                    b.Property<bool>("OwnAVC")
                        .HasColumnType("boolean");

                    b.Property<bool>("OwnAlzheimer")
                        .HasColumnType("boolean");

                    b.Property<bool>("OwnCA")
                        .HasColumnType("boolean");

                    b.Property<bool>("OwnDM")
                        .HasColumnType("boolean");

                    b.Property<bool>("OwnHAS")
                        .HasColumnType("boolean");

                    b.Property<bool>("OwnIAM")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId")
                        .IsUnique();

                    b.ToTable("HealthAndDiseaseEntity");
                });

            modelBuilder.Entity("Domain.Entities.MedicalRecord.MedicalRecordEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId")
                        .IsUnique();

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("Domain.Entities.Notes.NotesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Domain.Entities.Patient.PatientEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MotherName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Domain.Entities.PatientExams.PatientExamsEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PrescriptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("PatientExamsEntity");
                });

            modelBuilder.Entity("Domain.Entities.Service.ServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ServiceStatus")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientEntityId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("prontuario.Domain.Entities.PatientMedication.PatientPrescriptionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MedicalRecordId")
                        .HasColumnType("uuid");

                    b.Property<string>("MedicationName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Posology")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PrescriptionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Domain.Entites.AccessCode.AccessCodeEntity", b =>
                {
                    b.HasOne("Domain.Entites.User.UserEntity", "User")
                        .WithOne("AccessCode")
                        .HasForeignKey("Domain.Entites.AccessCode.AccessCodeEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entites.Appointment.AppointmentEntity", b =>
                {
                    b.HasOne("Domain.Entities.Patient.PatientEntity", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.User.UserEntity", "Professional")
                        .WithMany()
                        .HasForeignKey("ProfessionalId");

                    b.Navigation("Patient");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("Domain.Entites.MedicalCertificate.MedicalCertificateEntity", b =>
                {
                    b.HasOne("Domain.Entities.MedicalRecord.MedicalRecordEntity", "MedicalRecord")
                        .WithMany()
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Patient.PatientEntity", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.User.UserEntity", "Professional")
                        .WithMany()
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecord");

                    b.Navigation("Patient");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("Domain.Entites.Profile.ProfileEntity", b =>
                {
                    b.OwnsOne("Domain.ValuesObjects.Role", "Role", b1 =>
                        {
                            b1.Property<Guid>("ProfileEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ProfileEntityId");

                            b1.ToTable("Profiles");

                            b1.WithOwner()
                                .HasForeignKey("ProfileEntityId");
                        });

                    b.Navigation("Role")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entites.Referral.ReferralEntity", b =>
                {
                    b.HasOne("Domain.Entities.MedicalRecord.MedicalRecordEntity", "MedicalRecord")
                        .WithMany()
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.User.UserEntity", "Professional")
                        .WithMany()
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecord");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("Domain.Entites.User.UserEntity", b =>
                {
                    b.HasOne("Domain.Entites.Profile.ProfileEntity", "Profile")
                        .WithMany("Users")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValuesObjects.CPF", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("UserEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserEntityId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityId");
                        });

                    b.OwnsOne("Domain.ValuesObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserEntityId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityId");
                        });

                    b.OwnsOne("Domain.ValuesObjects.Positions", "Position", b1 =>
                        {
                            b1.Property<Guid>("UserEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserEntityId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityId");
                        });

                    b.Navigation("Cpf")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Position")
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Domain.Entities.Address.AddressEntity", b =>
                {
                    b.HasOne("Domain.Entities.Patient.PatientEntity", "Patient")
                        .WithOne("AddressEntity")
                        .HasForeignKey("Domain.Entities.Address.AddressEntity", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValuesObjects.CEP", "Cep", b1 =>
                        {
                            b1.Property<Guid>("AddressEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("AddressEntityId");

                            b1.ToTable("AddressEntity");

                            b1.WithOwner()
                                .HasForeignKey("AddressEntityId");
                        });

                    b.Navigation("Cep")
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Anamnese.AnamneseEntity", b =>
                {
                    b.HasOne("Domain.Entities.MedicalRecord.MedicalRecordEntity", "MedicalRecord")
                        .WithOne("Anamnese")
                        .HasForeignKey("Domain.Entities.Anamnese.AnamneseEntity", "MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("prontuario.Domain.ValuesObjects.ClassificationStatus", "ClassificationStatus", b1 =>
                        {
                            b1.Property<Guid>("AnamneseEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AnamneseEntityId");

                            b1.ToTable("Anamnesis");

                            b1.WithOwner()
                                .HasForeignKey("AnamneseEntityId");
                        });

                    b.Navigation("ClassificationStatus")
                        .IsRequired();

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("Domain.Entities.EmergencyContactDetails.EmergencyContactDetailsEntity", b =>
                {
                    b.HasOne("Domain.Entities.Patient.PatientEntity", "Patient")
                        .WithMany("EmergencyContactDetailsEntity")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValuesObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("EmergencyContactDetailsEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("EmergencyContactDetailsEntityId");

                            b1.ToTable("EmergencyContactDetailsEntity");

                            b1.WithOwner()
                                .HasForeignKey("EmergencyContactDetailsEntityId");
                        });

                    b.OwnsOne("Domain.ValuesObjects.Relationship", "Relationship", b1 =>
                        {
                            b1.Property<Guid>("EmergencyContactDetailsEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("EmergencyContactDetailsEntityId");

                            b1.ToTable("EmergencyContactDetailsEntity");

                            b1.WithOwner()
                                .HasForeignKey("EmergencyContactDetailsEntityId");
                        });

                    b.Navigation("Patient");

                    b.Navigation("Phone")
                        .IsRequired();

                    b.Navigation("Relationship")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.HealthAndDisease.HealthAndDiseaseEntity", b =>
                {
                    b.HasOne("Domain.Entities.MedicalRecord.MedicalRecordEntity", "MedicalRecord")
                        .WithOne("HealthAndDisease")
                        .HasForeignKey("Domain.Entities.HealthAndDisease.HealthAndDiseaseEntity", "MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("Domain.Entities.MedicalRecord.MedicalRecordEntity", b =>
                {
                    b.HasOne("Domain.Entities.Service.ServiceEntity", "Service")
                        .WithOne("MedicalRecordEntity")
                        .HasForeignKey("Domain.Entities.MedicalRecord.MedicalRecordEntity", "ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Domain.ValuesObjects.MedicalRecordStatus", "Status", b1 =>
                        {
                            b1.Property<Guid>("MedicalRecordEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("MedicalRecordEntityId");

                            b1.ToTable("MedicalRecords");

                            b1.WithOwner()
                                .HasForeignKey("MedicalRecordEntityId");
                        });

                    b.OwnsOne("Domain.ValuesObjects.MedicalRecordStatus", "StatusInCaseOfAdmission", b1 =>
                        {
                            b1.Property<Guid>("MedicalRecordEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("MedicalRecordEntityId");

                            b1.ToTable("MedicalRecords");

                            b1.WithOwner()
                                .HasForeignKey("MedicalRecordEntityId");
                        });

                    b.Navigation("Service");

                    b.Navigation("Status")
                        .IsRequired();

                    b.Navigation("StatusInCaseOfAdmission")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Notes.NotesEntity", b =>
                {
                    b.HasOne("Domain.Entities.Patient.PatientEntity", "Patient")
                        .WithMany("NotesEntity")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.User.UserEntity", "User")
                        .WithMany("NotesEntity")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Patient.PatientEntity", b =>
                {
                    b.OwnsOne("Domain.ValuesObjects.CPF", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("PatientEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PatientEntityId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientEntityId");
                        });

                    b.OwnsOne("Domain.ValuesObjects.Phone", "Phone", b1 =>
                        {
                            b1.Property<Guid>("PatientEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("PatientEntityId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientEntityId");
                        });

                    b.OwnsOne("Domain.ValuesObjects.PatientStatus", "Status", b1 =>
                        {
                            b1.Property<Guid>("PatientEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("PatientEntityId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientEntityId");
                        });

                    b.OwnsOne("prontuario.Domain.ValuesObjects.RG", "Rg", b1 =>
                        {
                            b1.Property<Guid>("PatientEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("PatientEntityId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientEntityId");
                        });

                    b.OwnsOne("prontuario.Domain.ValuesObjects.SUS", "Sus", b1 =>
                        {
                            b1.Property<Guid>("PatientEntityId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasColumnType("text");

                            b1.HasKey("PatientEntityId");

                            b1.ToTable("Patients");

                            b1.WithOwner()
                                .HasForeignKey("PatientEntityId");
                        });

                    b.Navigation("Cpf")
                        .IsRequired();

                    b.Navigation("Phone")
                        .IsRequired();

                    b.Navigation("Rg")
                        .IsRequired();

                    b.Navigation("Status")
                        .IsRequired();

                    b.Navigation("Sus")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.PatientExams.PatientExamsEntity", b =>
                {
                    b.HasOne("Domain.Entities.MedicalRecord.MedicalRecordEntity", "MedicalRecord")
                        .WithMany("PatientExams")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("Domain.Entities.Service.ServiceEntity", b =>
                {
                    b.HasOne("Domain.Entities.Patient.PatientEntity", "PatientEntity")
                        .WithMany("ServicesEntity")
                        .HasForeignKey("PatientEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientEntity");
                });

            modelBuilder.Entity("prontuario.Domain.Entities.PatientMedication.PatientPrescriptionEntity", b =>
                {
                    b.HasOne("Domain.Entities.MedicalRecord.MedicalRecordEntity", "MedicalRecord")
                        .WithMany("PatientMedications")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entites.User.UserEntity", "Professional")
                        .WithMany()
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecord");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("Domain.Entites.Profile.ProfileEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entites.User.UserEntity", b =>
                {
                    b.Navigation("AccessCode")
                        .IsRequired();

                    b.Navigation("NotesEntity");
                });

            modelBuilder.Entity("Domain.Entities.MedicalRecord.MedicalRecordEntity", b =>
                {
                    b.Navigation("Anamnese");

                    b.Navigation("HealthAndDisease")
                        .IsRequired();

                    b.Navigation("PatientExams");

                    b.Navigation("PatientMedications");
                });

            modelBuilder.Entity("Domain.Entities.Patient.PatientEntity", b =>
                {
                    b.Navigation("AddressEntity")
                        .IsRequired();

                    b.Navigation("EmergencyContactDetailsEntity");

                    b.Navigation("NotesEntity");

                    b.Navigation("ServicesEntity");
                });

            modelBuilder.Entity("Domain.Entities.Service.ServiceEntity", b =>
                {
                    b.Navigation("MedicalRecordEntity");
                });
#pragma warning restore 612, 618
        }
    }
}
